/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CASCADE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_CONFIG_DISCRIMINATOR = new Uint8Array([
  29, 158, 252, 191, 10, 83, 219, 99,
]);

export function getUpdateConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_CONFIG_DISCRIMINATOR
  );
}

export type UpdateConfigInstruction<
  TProgram extends string = typeof CASCADE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  newAuthority: Option<Address>;
  newTreasuryPubkey: Option<Address>;
  newMinGoal: Option<bigint>;
  newMinWithdrawal: Option<bigint>;
  newPlatformFeeBps: Option<bigint>;
};

export type UpdateConfigInstructionDataArgs = {
  newAuthority: OptionOrNullable<Address>;
  newTreasuryPubkey: OptionOrNullable<Address>;
  newMinGoal: OptionOrNullable<number | bigint>;
  newMinWithdrawal: OptionOrNullable<number | bigint>;
  newPlatformFeeBps: OptionOrNullable<number | bigint>;
};

export function getUpdateConfigInstructionDataEncoder(): Encoder<UpdateConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newAuthority', getOptionEncoder(getAddressEncoder())],
      ['newTreasuryPubkey', getOptionEncoder(getAddressEncoder())],
      ['newMinGoal', getOptionEncoder(getU64Encoder())],
      ['newMinWithdrawal', getOptionEncoder(getU64Encoder())],
      ['newPlatformFeeBps', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_CONFIG_DISCRIMINATOR })
  );
}

export function getUpdateConfigInstructionDataDecoder(): Decoder<UpdateConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newAuthority', getOptionDecoder(getAddressDecoder())],
    ['newTreasuryPubkey', getOptionDecoder(getAddressDecoder())],
    ['newMinGoal', getOptionDecoder(getU64Decoder())],
    ['newMinWithdrawal', getOptionDecoder(getU64Decoder())],
    ['newPlatformFeeBps', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getUpdateConfigInstructionDataCodec(): Codec<
  UpdateConfigInstructionDataArgs,
  UpdateConfigInstructionData
> {
  return combineCodec(
    getUpdateConfigInstructionDataEncoder(),
    getUpdateConfigInstructionDataDecoder()
  );
}

export type UpdateConfigAsyncInput<
  TAccountAuthority extends string = string,
  TAccountConfig extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  config?: Address<TAccountConfig>;
  newAuthority: UpdateConfigInstructionDataArgs['newAuthority'];
  newTreasuryPubkey: UpdateConfigInstructionDataArgs['newTreasuryPubkey'];
  newMinGoal: UpdateConfigInstructionDataArgs['newMinGoal'];
  newMinWithdrawal: UpdateConfigInstructionDataArgs['newMinWithdrawal'];
  newPlatformFeeBps: UpdateConfigInstructionDataArgs['newPlatformFeeBps'];
};

export async function getUpdateConfigInstructionAsync<
  TAccountAuthority extends string,
  TAccountConfig extends string,
  TProgramAddress extends Address = typeof CASCADE_PROGRAM_ADDRESS,
>(
  input: UpdateConfigAsyncInput<TAccountAuthority, TAccountConfig>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateConfigInstruction<TProgramAddress, TAccountAuthority, TAccountConfig>
> {
  // Program address.
  const programAddress = config?.programAddress ?? CASCADE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.config),
    ],
    data: getUpdateConfigInstructionDataEncoder().encode(
      args as UpdateConfigInstructionDataArgs
    ),
    programAddress,
  } as UpdateConfigInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountConfig
  >);
}

export type UpdateConfigInput<
  TAccountAuthority extends string = string,
  TAccountConfig extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  config: Address<TAccountConfig>;
  newAuthority: UpdateConfigInstructionDataArgs['newAuthority'];
  newTreasuryPubkey: UpdateConfigInstructionDataArgs['newTreasuryPubkey'];
  newMinGoal: UpdateConfigInstructionDataArgs['newMinGoal'];
  newMinWithdrawal: UpdateConfigInstructionDataArgs['newMinWithdrawal'];
  newPlatformFeeBps: UpdateConfigInstructionDataArgs['newPlatformFeeBps'];
};

export function getUpdateConfigInstruction<
  TAccountAuthority extends string,
  TAccountConfig extends string,
  TProgramAddress extends Address = typeof CASCADE_PROGRAM_ADDRESS,
>(
  input: UpdateConfigInput<TAccountAuthority, TAccountConfig>,
  config?: { programAddress?: TProgramAddress }
): UpdateConfigInstruction<TProgramAddress, TAccountAuthority, TAccountConfig> {
  // Program address.
  const programAddress = config?.programAddress ?? CASCADE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.config),
    ],
    data: getUpdateConfigInstructionDataEncoder().encode(
      args as UpdateConfigInstructionDataArgs
    ),
    programAddress,
  } as UpdateConfigInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountConfig
  >);
}

export type ParsedUpdateConfigInstruction<
  TProgram extends string = typeof CASCADE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    config: TAccountMetas[1];
  };
  data: UpdateConfigInstructionData;
};

export function parseUpdateConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { authority: getNextAccount(), config: getNextAccount() },
    data: getUpdateConfigInstructionDataDecoder().decode(instruction.data),
  };
}
