/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CASCADE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_CAMPAIGN_DISCRIMINATOR = new Uint8Array([
  111, 131, 187, 98, 160, 193, 114, 244,
]);

export function getCreateCampaignDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_CAMPAIGN_DISCRIMINATOR
  );
}

export type CreateCampaignInstruction<
  TProgram extends string = typeof CASCADE_PROGRAM_ADDRESS,
  TAccountOrganiser extends string | AccountMeta<string> = string,
  TAccountCampaign extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountCampaignCounter extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOrganiser extends string
        ? WritableSignerAccount<TAccountOrganiser> &
            AccountSignerMeta<TAccountOrganiser>
        : TAccountOrganiser,
      TAccountCampaign extends string
        ? WritableAccount<TAccountCampaign>
        : TAccountCampaign,
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      TAccountCampaignCounter extends string
        ? WritableAccount<TAccountCampaignCounter>
        : TAccountCampaignCounter,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateCampaignInstructionData = {
  discriminator: ReadonlyUint8Array;
  goal: bigint;
  metadata: string;
  deadline: bigint;
};

export type CreateCampaignInstructionDataArgs = {
  goal: number | bigint;
  metadata: string;
  deadline: number | bigint;
};

export function getCreateCampaignInstructionDataEncoder(): Encoder<CreateCampaignInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['goal', getU64Encoder()],
      ['metadata', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['deadline', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_CAMPAIGN_DISCRIMINATOR })
  );
}

export function getCreateCampaignInstructionDataDecoder(): Decoder<CreateCampaignInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['goal', getU64Decoder()],
    ['metadata', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['deadline', getI64Decoder()],
  ]);
}

export function getCreateCampaignInstructionDataCodec(): Codec<
  CreateCampaignInstructionDataArgs,
  CreateCampaignInstructionData
> {
  return combineCodec(
    getCreateCampaignInstructionDataEncoder(),
    getCreateCampaignInstructionDataDecoder()
  );
}

export type CreateCampaignAsyncInput<
  TAccountOrganiser extends string = string,
  TAccountCampaign extends string = string,
  TAccountVault extends string = string,
  TAccountCampaignCounter extends string = string,
  TAccountConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  organiser: TransactionSigner<TAccountOrganiser>;
  campaign: Address<TAccountCampaign>;
  vault: Address<TAccountVault>;
  campaignCounter?: Address<TAccountCampaignCounter>;
  config?: Address<TAccountConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  goal: CreateCampaignInstructionDataArgs['goal'];
  metadata: CreateCampaignInstructionDataArgs['metadata'];
  deadline: CreateCampaignInstructionDataArgs['deadline'];
};

export async function getCreateCampaignInstructionAsync<
  TAccountOrganiser extends string,
  TAccountCampaign extends string,
  TAccountVault extends string,
  TAccountCampaignCounter extends string,
  TAccountConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CASCADE_PROGRAM_ADDRESS,
>(
  input: CreateCampaignAsyncInput<
    TAccountOrganiser,
    TAccountCampaign,
    TAccountVault,
    TAccountCampaignCounter,
    TAccountConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateCampaignInstruction<
    TProgramAddress,
    TAccountOrganiser,
    TAccountCampaign,
    TAccountVault,
    TAccountCampaignCounter,
    TAccountConfig,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CASCADE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    organiser: { value: input.organiser ?? null, isWritable: true },
    campaign: { value: input.campaign ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: false },
    campaignCounter: { value: input.campaignCounter ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.campaignCounter.value) {
    accounts.campaignCounter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 97, 109, 112, 97, 105, 103, 110, 95, 99, 111, 117, 110, 116,
            101, 114,
          ])
        ),
      ],
    });
  }
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.organiser),
      getAccountMeta(accounts.campaign),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.campaignCounter),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateCampaignInstructionDataEncoder().encode(
      args as CreateCampaignInstructionDataArgs
    ),
    programAddress,
  } as CreateCampaignInstruction<
    TProgramAddress,
    TAccountOrganiser,
    TAccountCampaign,
    TAccountVault,
    TAccountCampaignCounter,
    TAccountConfig,
    TAccountSystemProgram
  >);
}

export type CreateCampaignInput<
  TAccountOrganiser extends string = string,
  TAccountCampaign extends string = string,
  TAccountVault extends string = string,
  TAccountCampaignCounter extends string = string,
  TAccountConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  organiser: TransactionSigner<TAccountOrganiser>;
  campaign: Address<TAccountCampaign>;
  vault: Address<TAccountVault>;
  campaignCounter: Address<TAccountCampaignCounter>;
  config: Address<TAccountConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  goal: CreateCampaignInstructionDataArgs['goal'];
  metadata: CreateCampaignInstructionDataArgs['metadata'];
  deadline: CreateCampaignInstructionDataArgs['deadline'];
};

export function getCreateCampaignInstruction<
  TAccountOrganiser extends string,
  TAccountCampaign extends string,
  TAccountVault extends string,
  TAccountCampaignCounter extends string,
  TAccountConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CASCADE_PROGRAM_ADDRESS,
>(
  input: CreateCampaignInput<
    TAccountOrganiser,
    TAccountCampaign,
    TAccountVault,
    TAccountCampaignCounter,
    TAccountConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateCampaignInstruction<
  TProgramAddress,
  TAccountOrganiser,
  TAccountCampaign,
  TAccountVault,
  TAccountCampaignCounter,
  TAccountConfig,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CASCADE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    organiser: { value: input.organiser ?? null, isWritable: true },
    campaign: { value: input.campaign ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: false },
    campaignCounter: { value: input.campaignCounter ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.organiser),
      getAccountMeta(accounts.campaign),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.campaignCounter),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateCampaignInstructionDataEncoder().encode(
      args as CreateCampaignInstructionDataArgs
    ),
    programAddress,
  } as CreateCampaignInstruction<
    TProgramAddress,
    TAccountOrganiser,
    TAccountCampaign,
    TAccountVault,
    TAccountCampaignCounter,
    TAccountConfig,
    TAccountSystemProgram
  >);
}

export type ParsedCreateCampaignInstruction<
  TProgram extends string = typeof CASCADE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    organiser: TAccountMetas[0];
    campaign: TAccountMetas[1];
    vault: TAccountMetas[2];
    campaignCounter: TAccountMetas[3];
    config: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: CreateCampaignInstructionData;
};

export function parseCreateCampaignInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateCampaignInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      organiser: getNextAccount(),
      campaign: getNextAccount(),
      vault: getNextAccount(),
      campaignCounter: getNextAccount(),
      config: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateCampaignInstructionDataDecoder().decode(instruction.data),
  };
}
