/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CASCADE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DONATE_DISCRIMINATOR = new Uint8Array([
  121, 186, 218, 211, 73, 70, 196, 180,
]);

export function getDonateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(DONATE_DISCRIMINATOR);
}

export type DonateInstruction<
  TProgram extends string = typeof CASCADE_PROGRAM_ADDRESS,
  TAccountDonor extends string | AccountMeta<string> = string,
  TAccountCampaign extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountOrganiser extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDonor extends string
        ? WritableSignerAccount<TAccountDonor> &
            AccountSignerMeta<TAccountDonor>
        : TAccountDonor,
      TAccountCampaign extends string
        ? WritableAccount<TAccountCampaign>
        : TAccountCampaign,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountOrganiser extends string
        ? ReadonlyAccount<TAccountOrganiser>
        : TAccountOrganiser,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DonateInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type DonateInstructionDataArgs = { amount: number | bigint };

export function getDonateInstructionDataEncoder(): FixedSizeEncoder<DonateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DONATE_DISCRIMINATOR })
  );
}

export function getDonateInstructionDataDecoder(): FixedSizeDecoder<DonateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getDonateInstructionDataCodec(): FixedSizeCodec<
  DonateInstructionDataArgs,
  DonateInstructionData
> {
  return combineCodec(
    getDonateInstructionDataEncoder(),
    getDonateInstructionDataDecoder()
  );
}

export type DonateAsyncInput<
  TAccountDonor extends string = string,
  TAccountCampaign extends string = string,
  TAccountVault extends string = string,
  TAccountConfig extends string = string,
  TAccountTreasury extends string = string,
  TAccountOrganiser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  donor: TransactionSigner<TAccountDonor>;
  campaign: Address<TAccountCampaign>;
  vault: Address<TAccountVault>;
  config?: Address<TAccountConfig>;
  treasury: Address<TAccountTreasury>;
  organiser: Address<TAccountOrganiser>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: DonateInstructionDataArgs['amount'];
};

export async function getDonateInstructionAsync<
  TAccountDonor extends string,
  TAccountCampaign extends string,
  TAccountVault extends string,
  TAccountConfig extends string,
  TAccountTreasury extends string,
  TAccountOrganiser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CASCADE_PROGRAM_ADDRESS,
>(
  input: DonateAsyncInput<
    TAccountDonor,
    TAccountCampaign,
    TAccountVault,
    TAccountConfig,
    TAccountTreasury,
    TAccountOrganiser,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DonateInstruction<
    TProgramAddress,
    TAccountDonor,
    TAccountCampaign,
    TAccountVault,
    TAccountConfig,
    TAccountTreasury,
    TAccountOrganiser,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CASCADE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    donor: { value: input.donor ?? null, isWritable: true },
    campaign: { value: input.campaign ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    treasury: { value: input.treasury ?? null, isWritable: true },
    organiser: { value: input.organiser ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.donor),
      getAccountMeta(accounts.campaign),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.organiser),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getDonateInstructionDataEncoder().encode(
      args as DonateInstructionDataArgs
    ),
    programAddress,
  } as DonateInstruction<
    TProgramAddress,
    TAccountDonor,
    TAccountCampaign,
    TAccountVault,
    TAccountConfig,
    TAccountTreasury,
    TAccountOrganiser,
    TAccountSystemProgram
  >);
}

export type DonateInput<
  TAccountDonor extends string = string,
  TAccountCampaign extends string = string,
  TAccountVault extends string = string,
  TAccountConfig extends string = string,
  TAccountTreasury extends string = string,
  TAccountOrganiser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  donor: TransactionSigner<TAccountDonor>;
  campaign: Address<TAccountCampaign>;
  vault: Address<TAccountVault>;
  config: Address<TAccountConfig>;
  treasury: Address<TAccountTreasury>;
  organiser: Address<TAccountOrganiser>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: DonateInstructionDataArgs['amount'];
};

export function getDonateInstruction<
  TAccountDonor extends string,
  TAccountCampaign extends string,
  TAccountVault extends string,
  TAccountConfig extends string,
  TAccountTreasury extends string,
  TAccountOrganiser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CASCADE_PROGRAM_ADDRESS,
>(
  input: DonateInput<
    TAccountDonor,
    TAccountCampaign,
    TAccountVault,
    TAccountConfig,
    TAccountTreasury,
    TAccountOrganiser,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DonateInstruction<
  TProgramAddress,
  TAccountDonor,
  TAccountCampaign,
  TAccountVault,
  TAccountConfig,
  TAccountTreasury,
  TAccountOrganiser,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CASCADE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    donor: { value: input.donor ?? null, isWritable: true },
    campaign: { value: input.campaign ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    treasury: { value: input.treasury ?? null, isWritable: true },
    organiser: { value: input.organiser ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.donor),
      getAccountMeta(accounts.campaign),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.organiser),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getDonateInstructionDataEncoder().encode(
      args as DonateInstructionDataArgs
    ),
    programAddress,
  } as DonateInstruction<
    TProgramAddress,
    TAccountDonor,
    TAccountCampaign,
    TAccountVault,
    TAccountConfig,
    TAccountTreasury,
    TAccountOrganiser,
    TAccountSystemProgram
  >);
}

export type ParsedDonateInstruction<
  TProgram extends string = typeof CASCADE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    donor: TAccountMetas[0];
    campaign: TAccountMetas[1];
    vault: TAccountMetas[2];
    config: TAccountMetas[3];
    treasury: TAccountMetas[4];
    organiser: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: DonateInstructionData;
};

export function parseDonateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDonateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      donor: getNextAccount(),
      campaign: getNextAccount(),
      vault: getNextAccount(),
      config: getNextAccount(),
      treasury: getNextAccount(),
      organiser: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDonateInstructionDataDecoder().decode(instruction.data),
  };
}
