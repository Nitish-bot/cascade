/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getCampaignStatusDecoder,
  getCampaignStatusEncoder,
  type CampaignStatus,
  type CampaignStatusArgs,
} from '../types';

export const CAMPAIGN_DISCRIMINATOR = new Uint8Array([
  50, 40, 49, 11, 157, 220, 229, 192,
]);

export function getCampaignDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CAMPAIGN_DISCRIMINATOR);
}

export type Campaign = {
  discriminator: ReadonlyUint8Array;
  id: bigint;
  organiser: Address;
  goal: bigint;
  raised: bigint;
  metadata: string;
  vaultBump: number;
  createdAt: bigint;
  deadline: bigint;
  status: CampaignStatus;
};

export type CampaignArgs = {
  id: number | bigint;
  organiser: Address;
  goal: number | bigint;
  raised: number | bigint;
  metadata: string;
  vaultBump: number;
  createdAt: number | bigint;
  deadline: number | bigint;
  status: CampaignStatusArgs;
};

export function getCampaignEncoder(): Encoder<CampaignArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['id', getU64Encoder()],
      ['organiser', getAddressEncoder()],
      ['goal', getU64Encoder()],
      ['raised', getU64Encoder()],
      ['metadata', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['vaultBump', getU8Encoder()],
      ['createdAt', getI64Encoder()],
      ['deadline', getI64Encoder()],
      ['status', getCampaignStatusEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CAMPAIGN_DISCRIMINATOR })
  );
}

export function getCampaignDecoder(): Decoder<Campaign> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['id', getU64Decoder()],
    ['organiser', getAddressDecoder()],
    ['goal', getU64Decoder()],
    ['raised', getU64Decoder()],
    ['metadata', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['vaultBump', getU8Decoder()],
    ['createdAt', getI64Decoder()],
    ['deadline', getI64Decoder()],
    ['status', getCampaignStatusDecoder()],
  ]);
}

export function getCampaignCodec(): Codec<CampaignArgs, Campaign> {
  return combineCodec(getCampaignEncoder(), getCampaignDecoder());
}

export function decodeCampaign<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Campaign, TAddress>;
export function decodeCampaign<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Campaign, TAddress>;
export function decodeCampaign<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Campaign, TAddress> | MaybeAccount<Campaign, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCampaignDecoder()
  );
}

export async function fetchCampaign<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Campaign, TAddress>> {
  const maybeAccount = await fetchMaybeCampaign(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCampaign<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Campaign, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCampaign(maybeAccount);
}

export async function fetchAllCampaign(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Campaign>[]> {
  const maybeAccounts = await fetchAllMaybeCampaign(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCampaign(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Campaign>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCampaign(maybeAccount));
}
