/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const CAMPAIGN_COUNTER_DISCRIMINATOR = new Uint8Array([
  166, 204, 173, 116, 178, 217, 1, 210,
]);

export function getCampaignCounterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CAMPAIGN_COUNTER_DISCRIMINATOR
  );
}

export type CampaignCounter = {
  discriminator: ReadonlyUint8Array;
  count: bigint;
};

export type CampaignCounterArgs = { count: number | bigint };

export function getCampaignCounterEncoder(): FixedSizeEncoder<CampaignCounterArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['count', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CAMPAIGN_COUNTER_DISCRIMINATOR })
  );
}

export function getCampaignCounterDecoder(): FixedSizeDecoder<CampaignCounter> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['count', getU64Decoder()],
  ]);
}

export function getCampaignCounterCodec(): FixedSizeCodec<
  CampaignCounterArgs,
  CampaignCounter
> {
  return combineCodec(getCampaignCounterEncoder(), getCampaignCounterDecoder());
}

export function decodeCampaignCounter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CampaignCounter, TAddress>;
export function decodeCampaignCounter<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CampaignCounter, TAddress>;
export function decodeCampaignCounter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<CampaignCounter, TAddress>
  | MaybeAccount<CampaignCounter, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCampaignCounterDecoder()
  );
}

export async function fetchCampaignCounter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CampaignCounter, TAddress>> {
  const maybeAccount = await fetchMaybeCampaignCounter(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCampaignCounter<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CampaignCounter, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCampaignCounter(maybeAccount);
}

export async function fetchAllCampaignCounter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CampaignCounter>[]> {
  const maybeAccounts = await fetchAllMaybeCampaignCounter(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCampaignCounter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CampaignCounter>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeCampaignCounter(maybeAccount)
  );
}

export function getCampaignCounterSize(): number {
  return 16;
}
