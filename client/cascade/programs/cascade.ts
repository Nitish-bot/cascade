/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateCampaignInstruction,
  type ParsedDonateInstruction,
  type ParsedInitializeInstruction,
  type ParsedUpdateConfigInstruction,
  type ParsedWithdrawInstruction,
} from '../instructions';

export const CASCADE_PROGRAM_ADDRESS =
  'HQ8ejrFMtoNsShZRqkH842BRDqpzh7Xy7b5iqc1U9ffA' as Address<'HQ8ejrFMtoNsShZRqkH842BRDqpzh7Xy7b5iqc1U9ffA'>;

export enum CascadeAccount {
  Campaign,
  CampaignCounter,
  Config,
}

export function identifyCascadeAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CascadeAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([50, 40, 49, 11, 157, 220, 229, 192])
      ),
      0
    )
  ) {
    return CascadeAccount.Campaign;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([166, 204, 173, 116, 178, 217, 1, 210])
      ),
      0
    )
  ) {
    return CascadeAccount.CampaignCounter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
      ),
      0
    )
  ) {
    return CascadeAccount.Config;
  }
  throw new Error(
    'The provided account could not be identified as a cascade account.'
  );
}

export enum CascadeInstruction {
  CreateCampaign,
  Donate,
  Initialize,
  UpdateConfig,
  Withdraw,
}

export function identifyCascadeInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CascadeInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([111, 131, 187, 98, 160, 193, 114, 244])
      ),
      0
    )
  ) {
    return CascadeInstruction.CreateCampaign;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([121, 186, 218, 211, 73, 70, 196, 180])
      ),
      0
    )
  ) {
    return CascadeInstruction.Donate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return CascadeInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([29, 158, 252, 191, 10, 83, 219, 99])
      ),
      0
    )
  ) {
    return CascadeInstruction.UpdateConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 18, 70, 156, 148, 109, 161, 34])
      ),
      0
    )
  ) {
    return CascadeInstruction.Withdraw;
  }
  throw new Error(
    'The provided instruction could not be identified as a cascade instruction.'
  );
}

export type ParsedCascadeInstruction<
  TProgram extends string = 'HQ8ejrFMtoNsShZRqkH842BRDqpzh7Xy7b5iqc1U9ffA',
> =
  | ({
      instructionType: CascadeInstruction.CreateCampaign;
    } & ParsedCreateCampaignInstruction<TProgram>)
  | ({
      instructionType: CascadeInstruction.Donate;
    } & ParsedDonateInstruction<TProgram>)
  | ({
      instructionType: CascadeInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: CascadeInstruction.UpdateConfig;
    } & ParsedUpdateConfigInstruction<TProgram>)
  | ({
      instructionType: CascadeInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>);
