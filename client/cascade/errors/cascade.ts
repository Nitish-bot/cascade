/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { CASCADE_PROGRAM_ADDRESS } from '../programs';

/** CounterOverflow: Campaign Counter overflow */
export const CASCADE_ERROR__COUNTER_OVERFLOW = 0x1770; // 6000
/** MetadataTooLong: Metadata link too long, must be 128 characters or less */
export const CASCADE_ERROR__METADATA_TOO_LONG = 0x1771; // 6001
/** InsufficientGoal: Goal must be greater than 0.05 SOL */
export const CASCADE_ERROR__INSUFFICIENT_GOAL = 0x1772; // 6002
/** DeadlineInPast: Deadline must be in the future */
export const CASCADE_ERROR__DEADLINE_IN_PAST = 0x1773; // 6003
/** DeadlineTooSoon: Deadline must be at least 1 day in the future */
export const CASCADE_ERROR__DEADLINE_TOO_SOON = 0x1774; // 6004
/** FeeCalculationOverflow: Fee calculation overflow */
export const CASCADE_ERROR__FEE_CALCULATION_OVERFLOW = 0x1775; // 6005
/** RaisedOverflow: Raised amount overflow */
export const CASCADE_ERROR__RAISED_OVERFLOW = 0x1776; // 6006
/** InsufficientFundsForDonation: Insufficient funds for donation */
export const CASCADE_ERROR__INSUFFICIENT_FUNDS_FOR_DONATION = 0x1777; // 6007
/** InsufficientFundsForWithdrawal: Insufficient funds for withdrawal, must be greater than 0.01 SOL */
export const CASCADE_ERROR__INSUFFICIENT_FUNDS_FOR_WITHDRAWAL = 0x1778; // 6008
/** WithdrawalAmountExceedsBalance: Withdrawal amount must be less than or equal to the vault balance */
export const CASCADE_ERROR__WITHDRAWAL_AMOUNT_EXCEEDS_BALANCE = 0x1779; // 6009
/** VaultBelowRentExempt: Completing this withdrawal will leave the vault below rent exempt threshold */
export const CASCADE_ERROR__VAULT_BELOW_RENT_EXEMPT = 0x177a; // 6010
/** UnauthorizedAction: Unauthorized action */
export const CASCADE_ERROR__UNAUTHORIZED_ACTION = 0x177b; // 6011

export type CascadeError =
  | typeof CASCADE_ERROR__COUNTER_OVERFLOW
  | typeof CASCADE_ERROR__DEADLINE_IN_PAST
  | typeof CASCADE_ERROR__DEADLINE_TOO_SOON
  | typeof CASCADE_ERROR__FEE_CALCULATION_OVERFLOW
  | typeof CASCADE_ERROR__INSUFFICIENT_FUNDS_FOR_DONATION
  | typeof CASCADE_ERROR__INSUFFICIENT_FUNDS_FOR_WITHDRAWAL
  | typeof CASCADE_ERROR__INSUFFICIENT_GOAL
  | typeof CASCADE_ERROR__METADATA_TOO_LONG
  | typeof CASCADE_ERROR__RAISED_OVERFLOW
  | typeof CASCADE_ERROR__UNAUTHORIZED_ACTION
  | typeof CASCADE_ERROR__VAULT_BELOW_RENT_EXEMPT
  | typeof CASCADE_ERROR__WITHDRAWAL_AMOUNT_EXCEEDS_BALANCE;

let cascadeErrorMessages: Record<CascadeError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  cascadeErrorMessages = {
    [CASCADE_ERROR__COUNTER_OVERFLOW]: `Campaign Counter overflow`,
    [CASCADE_ERROR__DEADLINE_IN_PAST]: `Deadline must be in the future`,
    [CASCADE_ERROR__DEADLINE_TOO_SOON]: `Deadline must be at least 1 day in the future`,
    [CASCADE_ERROR__FEE_CALCULATION_OVERFLOW]: `Fee calculation overflow`,
    [CASCADE_ERROR__INSUFFICIENT_FUNDS_FOR_DONATION]: `Insufficient funds for donation`,
    [CASCADE_ERROR__INSUFFICIENT_FUNDS_FOR_WITHDRAWAL]: `Insufficient funds for withdrawal, must be greater than 0.01 SOL`,
    [CASCADE_ERROR__INSUFFICIENT_GOAL]: `Goal must be greater than 0.05 SOL`,
    [CASCADE_ERROR__METADATA_TOO_LONG]: `Metadata link too long, must be 128 characters or less`,
    [CASCADE_ERROR__RAISED_OVERFLOW]: `Raised amount overflow`,
    [CASCADE_ERROR__UNAUTHORIZED_ACTION]: `Unauthorized action`,
    [CASCADE_ERROR__VAULT_BELOW_RENT_EXEMPT]: `Completing this withdrawal will leave the vault below rent exempt threshold`,
    [CASCADE_ERROR__WITHDRAWAL_AMOUNT_EXCEEDS_BALANCE]: `Withdrawal amount must be less than or equal to the vault balance`,
  };
}

export function getCascadeErrorMessage(code: CascadeError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (cascadeErrorMessages as Record<CascadeError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isCascadeError<TProgramErrorCode extends CascadeError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    CASCADE_PROGRAM_ADDRESS,
    code
  );
}
